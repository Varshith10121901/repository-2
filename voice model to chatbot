import speech_recognition as sr
import pyttsx3
import threading
import queue
import time
import json
import os
from typing import Callable, Dict, Any, Optional, List

class VoiceAssistant:
    """
    Voice Assistant class that handles speech recognition and text-to-speech
    for integration with an existing AI chatbot.
    """
    
    def __init__(self, 
                 chatbot_handler: Callable[[str], str],
                 language: str = "en-US",
                 voice_id: Optional[str] = None,
                 auto_restart: bool = True):
        """
        Initialize the voice assistant.
        
        Args:
            chatbot_handler: Function that processes text input and returns response
            language: Language code for speech recognition
            voice_id: Voice ID for text-to-speech (None for default)
            auto_restart: Whether to automatically restart listening after processing
        """
        # Initialize recognizer and TTS engine
        self.recognizer = sr.Recognizer()
        self.engine = pyttsx3.init()
        
        # Set voice properties
        self.set_voice(voice_id)
        
        # Configure settings
        self.language = language
        self.chatbot_handler = chatbot_handler
        self.auto_restart = auto_restart
        
        # Create processing queue and state variables
        self.audio_queue = queue.Queue()
        self.is_listening = False
        self.should_stop = False
        self.processing_thread = None
        
        # Calibrate for ambient noise automatically
        self.calibrate_recognizer()
        
    def set_voice(self, voice_id: Optional[str] = None) -> None:
        """Set the voice for text-to-speech"""
        voices = self.engine.getProperty('voices')
        
        # List available voices for reference
        print("Available voices:")
        for idx, voice in enumerate(voices):
            print(f"  {idx}. ID: {voice.id}, Name: {voice.name}, Languages: {voice.languages}")
        
        # Set voice if specified, otherwise use default
        if voice_id is not None:
            matching_voices = [v for v in voices if v.id == voice_id]
            if matching_voices:
                self.engine.setProperty('voice', matching_voices[0].id)
                print(f"Set voice to: {matching_voices[0].name}")
            else:
                print(f"Voice ID '{voice_id}' not found. Using default voice.")
        else:
            # Try to find a female voice as default (common preference for assistants)
            female_voices = [v for v in voices if "female" in v.name.lower()]
            if female_voices:
                self.engine.setProperty('voice', female_voices[0].id)
                print(f"Set default female voice: {female_voices[0].name}")
            else:
                print(f"Using system default voice: {voices[0].name}")
        
        # Set default speech rate and volume
        self.engine.setProperty('rate', 180)  # Speed of speech
        self.engine.setProperty('volume', 1.0)  # Volume (0.0 to 1.0)
        
    def calibrate_recognizer(self) -> None:
        """Calibrate the recognizer for ambient noise"""
        try:
            with sr.Microphone() as source:
                print("Calibrating for ambient noise... Please be quiet.")
                self.recognizer.adjust_for_ambient_noise(source, duration=2)
                print("Calibration complete.")
        except Exception as e:
            print(f"Error during calibration: {e}")
    
    def start(self) -> None:
        """Start the voice assistant"""
        if self.processing_thread is None or not self.processing_thread.is_alive():
            self.should_stop = False
            self.processing_thread = threading.Thread(target=self._processing_loop)
            self.processing_thread.daemon = True
            self.processing_thread.start()
            print("Voice assistant started. Listening for commands...")
    
    def stop(self) -> None:
        """Stop the voice assistant"""
        self.should_stop = True
        self.is_listening = False
        if self.processing_thread and self.processing_thread.is_alive():
            self.processing_thread.join(timeout=2)
        print("Voice assistant stopped.")
    
    def toggle_listening(self) -> bool:
        """Toggle listening state and return the new state"""
        if self.is_listening:
            self.is_listening = False
            print("Listening paused.")
        else:
            self.is_listening = True
            print("Listening resumed.")
        return self.is_listening
    
    def speak(self, text: str) -> None:
        """Convert text to speech"""
        if not text:
            return
        
        try:
            print(f"Assistant: {text}")
            self.engine.say(text)
            self.engine.runAndWait()
        except Exception as e:
            print(f"TTS Error: {e}")
    
    def _processing_loop(self) -> None:
        """Main processing loop that handles speech recognition"""
        self.is_listening = True
        
        while not self.should_stop:
            if not self.is_listening:
                time.sleep(0.5)
                continue
                
            try:
                with sr.Microphone() as source:
                    print("Listening...")
                    audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=10)
                    self.audio_queue.put(audio)
                    self._process_audio()
            except sr.WaitTimeoutError:
                # Timeout is normal, just continue listening
                pass
            except Exception as e:
                print(f"Listening Error: {e}")
                # Wait a bit before retrying
                time.sleep(0.5)
    
    def _process_audio(self) -> None:
        """Process audio from the queue"""
        while not self.audio_queue.empty():
            audio = self.audio_queue.get()
            
            try:
                # Convert speech to text
                print("Processing speech...")
                text = self.recognizer.recognize_google(audio, language=self.language)
                print(f"User said: {text}")
                
                # Pause listening while processing to avoid feedback loops
                was_listening = self.is_listening
                self.is_listening = False
                
                # Process with chatbot and speak response
                response = self.chatbot_handler(text)
                self.speak(response)
                
                # Resume listening if it was on and auto-restart is enabled
                if was_listening and self.auto_restart:
                    self.is_listening = True
                
            except sr.UnknownValueError:
                print("Speech not understood")
            except sr.RequestError as e:
                print(f"Could not request results; {e}")
            except Exception as e:
                print(f"Processing error: {e}")


class VoiceEnabledChatbot:
    """
    An example integration class that connects the VoiceAssistant
    with an existing chatbot system.
    """
    
    def __init__(self, 
                 language: str = "en-US",
                 voice_id: Optional[str] = None,
                 config_file: str = "voice_config.json"):
        """
        Initialize the voice-enabled chatbot.
        
        Args:
            language: Language code for speech recognition
            voice_id: Voice ID for text-to-speech
            config_file: Path to configuration file
        """
        # Load or create configuration
        self.config_file = config_file
        self.config = self._load_config()
        
        # Override config with constructor parameters if provided
        if language:
            self.config["language"] = language
        if voice_id:
            self.config["voice_id"] = voice_id
            
        # Initialize voice assistant with our process_message handler
        self.voice_assistant = VoiceAssistant(
            chatbot_handler=self.process_message,
            language=self.config["language"],
            voice_id=self.config["voice_id"],
            auto_restart=self.config["auto_restart"]
        )
        
        # History for conversation context
        self.conversation_history = []
        
        print(f"Voice-enabled chatbot initialized with language: {self.config['language']}")
    
    def _load_config(self) -> Dict[str, Any]:
        """Load configuration from file or create default"""
        default_config = {
            "language": "en-US",
            "voice_id": None,
            "auto_restart": True,
            "save_history": True,
            "max_history": 10
        }
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    config = json.load(f)
                print(f"Loaded configuration from {self.config_file}")
                return {**default_config, **config}  # Merge with defaults
            except Exception as e:
                print(f"Error loading config: {e}")
        
        # Save default config
        try:
            with open(self.config_file, 'w') as f:
                json.dump(default_config, f, indent=2)
            print(f"Created default configuration at {self.config_file}")
        except Exception as e:
            print(f"Error saving default config: {e}")
            
        return default_config
        
    def save_config(self) -> None:
        """Save current configuration to file"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(self.config, f, indent=2)
            print(f"Configuration saved to {self.config_file}")
        except Exception as e:
            print(f"Error saving config: {e}")
    
    def start(self) -> None:
        """Start the voice-enabled chatbot"""
        self.voice_assistant.start()
        
    def stop(self) -> None:
        """Stop the voice-enabled chatbot"""
        self.voice_assistant.stop()
    
    def toggle_listening(self) -> bool:
        """Toggle listening state"""
        return self.voice_assistant.toggle_listening()
    
    def speak(self, text: str) -> None:
        """Make the assistant speak without processing"""
        self.voice_assistant.speak(text)
    
    def process_message(self, message: str) -> str:
        """
        Process a message through your existing chatbot.
        This is where you integrate with your AI chatbot logic.
        
        Args:
            message: The user's message to process
            
        Returns:
            The chatbot's response
        """
        # Record in history
        if self.config["save_history"]:
            self.conversation_history.append({"role": "user", "content": message})
            if len(self.conversation_history) > self.config["max_history"] * 2:
                # Keep only the most recent interactions
                self.conversation_history = self.conversation_history[-self.config["max_history"]*2:]
        
        # REPLACE THIS WITH YOUR ACTUAL CHATBOT LOGIC
        # ============================================
        # This is just a placeholder. You should integrate with your
        # existing chatbot processing logic here.
        
        # Simple echo response for demonstration
        response = f"You said: {message}"
        
        # Add some sample commands for testing
        if "hello" in message.lower():
            response = "Hello! How can I help you today?"
        elif "time" in message.lower():
            response = f"The current time is {time.strftime('%H:%M')}"
        elif "date" in message.lower():
            response = f"Today is {time.strftime('%A, %B %d, %Y')}"
        elif "bye" in message.lower() or "goodbye" in message.lower():
            response = "Goodbye! Have a great day!"
        
        # Record response in history
        if self.config["save_history"]:
            self.conversation_history.append({"role": "assistant", "content": response})
        
        return response


# Example integration with an existing chatbot system
def integrate_with_existing_chatbot(your_chatbot_instance):
    """
    Example of how to integrate the voice assistant with your existing chatbot.
    
    Args:
        your_chatbot_instance: Your existing chatbot instance
    
    Returns:
        An integrated voice-enabled chatbot
    """
    # Define a callback function that interfaces with your chatbot
    def process_with_existing_chatbot(message):
        # Call your chatbot's processing function
        response = your_chatbot_instance.process_message(message)
        return response
    
    # Create voice assistant with the callback
    voice_assistant = VoiceAssistant(
        chatbot_handler=process_with_existing_chatbot,
        language="en-US"
    )
    
    return voice_assistant


# Example usage
if __name__ == "__main__":
    # Option 1: Standalone voice-enabled chatbot
    chatbot = VoiceEnabledChatbot()
    chatbot.start()
    
    try:
        # Keep the program running
        print("Voice assistant is running. Press Ctrl+C to exit.")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Shutting down...")
        chatbot.stop()
        
    # Option 2: Integration example
    # Uncomment this if you want to integrate with an existing chatbot
    """
    # Assuming you have an existing chatbot class
    class YourExistingChatbot:
        def process_message(self, message):
            # Your existing logic here
            return f"Your chatbot response to: {message}"
    
    # Create your chatbot instance
    your_chatbot = YourExistingChatbot()
    
    # Integrate with voice assistant
    voice_assistant = integrate_with_existing_chatbot(your_chatbot)
    voice_assistant.start()
    
    try:
        # Keep the program running
        print("Integrated voice assistant is running. Press Ctrl+C to exit.")
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Shutting down...")
        voice_assistant.stop()
    """